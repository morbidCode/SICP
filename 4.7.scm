(define (eval exp env)
  (cond ((self-evaluating? exp) 
         exp)
        ((variable? exp) 
         (lookup-variable-value exp env))
        ((quoted? exp) 
         (text-of-quotation exp))
        ((assignment? exp) 
         (eval-assignment exp env))
        ((definition? exp) 
         (eval-definition exp env))
        ((if? exp) 
         (eval-if exp env))
        ((lambda? exp)
         (make-procedure 
          (lambda-parameters exp)
          (lambda-body exp)
          env))
        ((begin? exp)
         (eval-sequence 
          (begin-actions exp) 
          env))
        ((cond? exp) 
         (eval (cond->if exp) env))
        ((let? exp) 
         (eval (let->combination exp) env))
((let*? exp)
(eval (let*->nested-lets exp) env))
        ((application? exp)
         ((apply (eval (operator exp) env)
                (list-of-values 
                 (operands exp) 
                 env)))
        (else
         (error "Unknown expression 
                 type: EVAL" exp))))

(define (make-let parameters body)
(cons 'let (cons parameters body)))

(define (let*? exp) 
  (tagged-list? exp 'let*))
(define (let*-parameters exp)
(cadr exp))
(define (let*-body exp)
(cddr exp))

(define (let*->nested-lets exp)
(let*-sequence (let*-parameters exp) (let*-body exp)))

(define (let*-sequence params body)
(let ((param (list (car params))))
(if (null? (cdr params))
(make-let param body)
(make-let param (list (let*-sequence (cdr params) body))))))
