(define (eval exp env)
  (cond ((self-evaluating? exp) 
         exp)
        ((variable? exp) 
         (lookup-variable-value exp env))
        ((quoted? exp) 
         (text-of-quotation exp))
        ((assignment? exp) 
         (eval-assignment exp env))
        ((definition? exp) 
         (eval-definition exp env))
        ((if? exp) 
         (eval-if exp env))
        ((lambda? exp)
         (make-procedure 
          (lambda-parameters exp)
          (lambda-body exp)
          env))
        ((begin? exp)
         (eval-sequence 
          (begin-actions exp) 
          env))
        ((cond? exp) 
         (eval (cond->if exp) env))
        ((while? exp) 
         (eval (while->if exp) env))
        ((for? exp) 
         (eval (for->if exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values 
                 (operands exp) 
                 env)))
        (else
         (error "Unknown expression 
                 type: EVAL" exp))))

(define (while? exp) (tagged-list? exp 'while))
(define (while-exp exp) (cadr exp))
(define (while-body exp) (cddr exp))

(define (while->if exp)
(make-if (while-exp exp) (make-begin (list (list (make-lambda '() (while-body exp))) exp)) ''ok))

(define (for? exp) (tagged-list? exp 'for))
(define (for-init exp) (cadr exp))
(define (for-local-init? exp) (pair? (for-init exp)))
(define (for-termination exp) (caddr exp))
(define (for-increment exp) (cadddr exp))
(define (for-body exp) (cddddr exp))

(define (for->if exp)
(if (for-local-init? exp)
(let ((local-init (for-init exp)))
(list (make-lambda (list (car local-init)) (list (for->if (cons 'for (cons (car local-init) (cons (for-termination exp) (cons (for-increment exp) (for-body exp)))))))) (cadr local-init)))
(make-if (for-termination exp) (make-begin (list (list (make-lambda '() (for-body exp))) (list 'set! (for-init exp) (for-increment exp)) exp)) ''ok)))
