(define (cycle? lst)
(if (null? lst) #f
(let ((head lst)
(current (cdr lst))
(head-index 0)
(current-index 1))
(define (compare)
(cond ((null? current) #f)
((= head-index current-index)
(set! head lst)
(set! current (cdr current))
(set! head-index 0)
(set! current-index (+ current-index 1))
(compare))
((not (eq? head current))
(set! head (cdr head))
(set! head-index (+ head-index 1))
(compare))
(else #t)))
(compare))))
